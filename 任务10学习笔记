1.flex布局模型不同于块和内联模型布局，块和内联模型的布局计算依赖于块和内联的流方向，而flex布局依赖于flex directions.
简单的说：Flexbox是布局模块，而不是一个简单的属性，它包含父元素(flex container)和子元素(flex items)的属性。
2.主轴、主轴方向(main axis |main dimension)：用户代理沿着一个伸缩容器的主轴配置伸缩项目，主轴是主轴方向的延伸。
主轴起点、主轴终点(main-start |main-end)：伸缩项目的配置从容器的主轴起点边开始，往主轴终点边结束。
主轴长度、主轴长度属性(main size |main size property)：伸缩项目的在主轴方向的宽度或高度就是项目的主轴长度，
伸缩项目的主轴长度属性是width或height属性，由哪一个对着主轴方向决定。
侧轴、侧轴方向(cross axis |cross dimension)：与主轴垂直的轴称作侧轴，是侧轴方向的延伸。
侧轴起点、侧轴终点(cross-start |cross-end)：填满项目的伸缩行的配置从容器的侧轴起点边开始，往侧轴终点边结束。
侧轴长度、侧轴长度属性(cross size |cross size property)：伸缩项目的在侧轴方向的宽度或高度就是项目的侧轴长度，
伸缩项目的侧轴长度属性是"width"或"height"属性，由哪一个对着侧轴方向决定。
3.属性
1.display（flex container）

display: other values | flex | inline-flex;
2.flex-direction（flex container）

这个主要用来创建主轴，从而定义了伸缩项目放置在伸缩容器的方向。

flex-direction: row | row-reverse | column | column-reverse
row(默认值)：在“ltr”排版方式下从左向右排列；在“rtl”排版方式下从右向左排列。
row-reverse：与row排列方向相反，在“ltr”排版方式下从右向左排列；在“rtl”排版方式下从左向右排列.
column：类似 于row，不过是从上到下排列.
column-reverse：类似于row-reverse，不过是从下到上排列。
3.order（flex items）
默认情况下，伸缩项目是按照文档流出现先后顺序排列。然而，“order”属性可以控制伸缩项目在他们的伸缩容器出现的顺序。
4.flex-wrap（flex container）
这个主要用来定义伸缩容器里是单行还是多行显示，侧轴的方向决定了新行堆放的方向
flex-wrap: nowrap | wrap | wrap-reverse 
5.flex-flow（flex container）
这个是“flex-direction”和“flex-wrap”属性的缩写版本。同时定义了伸缩容器的主轴和侧轴。其默认值为“row nowrap”。

flex-flow: <‘flex-direction’> || <‘flex-wrap’>
6.justify-content（flex container）
这个是用来定义伸缩项目沿着主轴线的对齐方式。当一行上的所有伸缩项目都不能伸缩或可伸缩但是已经达到其最大长度时，这一属性才会对多余的空间进行分配。当项目溢出某一行时，这一属性也会在项目的对齐上施加一些控制。

justify-content: flex-start | flex-end | center | space-between | space-around;
7.align-content（flex container）
这个属性主要用来调准伸缩行在伸缩容器里的对齐方式。类似于伸缩项目在主轴上使用“justify-content”一样。

 align-content: flex-start | flex-end | center | space-between | space-around | stretch;
8. align-items（flex container）

align-items: flex-start | flex-end | center | baseline | stretch
flex-start：伸缩项目在侧轴起点边的外边距紧靠住该行在侧轴起始的边。
flex-end：伸缩项目在侧轴终点边的外边距靠住该行在侧轴终点的边 。
center：伸缩项目的外边距盒在该行的侧轴上居中放置。
baseline：伸缩项目根据他们的基线对齐。
stretch（默认值）：伸缩项目拉伸填充整个伸缩容器。此值会使项目的外边距盒的尺寸在遵照「min/max-width/height」属性的限制下尽可能接近所在行的尺寸。
9.flex-grow（flex items）
根据需要用来定义伸缩项目的扩展能力。它接受一个不带单位的值做为一个比例。主要用来决定伸缩容器剩余空间按比例应扩展多少空间。
10..flex-shrink（flex items）
根据需要用来定义伸缩项目收缩的能力
11.flex-basis（flex items）
这个用来设置伸缩基准值，剩余的空间按比率进行伸缩
12.flex（flex items）
这是“flex-grow”、“flex-shrink”和“flex-basis”三个属性的缩写。其中第二个和第三个参数（flex-shrink、flex-basis）是可选参数。默认值为“0 1 auto”。

flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]
13.#first {
  flex: 1 200px;
}
    
#second {
  flex: 2 300px;
}
    
#third {
  flex: 1 250px;
}	
首先flex-basis的值主要取决于伸缩项目的width或者高，同时取决于流动方向。然后，剩下的空间根据flex-grow给伸缩项目最后宽度来划分。
所以伸缩项目会沿着主轴线大小为200px、300px和250px,总共750px。如果伸缩容器沿主轴方向是950px,这样就会多出一个200px空间，
那么这多出的200px空间将分配给伸缩项目。第一个和第三个伸缩项目将得到50px的空间，因为他的flex-grow值是“1”,
他们最终的空间是250px和300px。第二个伸缩项目将获得100px空间，因为他的flex-grow值为“2”,他的最后空间大小为400px。

14.与媒体查询构成响应式布局
.flex,
.flex > div {
    box-sizing: border-box;
}

.flex {
    border: 1px solid gray;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-justify-content: space-between;
        -ms-flex-pack: justify;
            justify-content: space-between;
    -webkit-align-items: center;
        -ms-flex-align: center;
            align-items: center;
    -webkit-flex: none;
        -ms-flex: none;
            flex: none;
}

.flex > div {
    width: 150px;
    border: 1px solid #f00;
    padding: 0;
    margin-bottom: 10px;
}

.flex_item1 {
    height: 120px;
}

.flex_item2 {
    height: 100px;
}

.flex_item3 {
    height: 40px;
}

.flex_item4 {
    height: 200px;
    border: 1px solid blue!important;
}

@media all and (max-width: 640px) {
    .flex_item4 {
        -webkit-order: -1;
            -ms-flex-order: -1;
                order: -1;
    }
    .flex {
        -webkit-flex-wrap: wrap;
            -ms-flex-wrap: wrap;
                flex-wrap: wrap;
        -webkit-align-items: flex-start;
            -ms-flex-align: start;
                align-items: flex-start;
    }
}

